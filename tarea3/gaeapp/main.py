# -*- coding: utf-8 -*-
"""Archivo principal para el echobot. Main File for the echobot"""
from fbmq import Page
from flask import Flask, request
import random
import nltk


# Generated token in the facebook web page
PAGE_ACCESS_TOKEN = "EAAEyhjxiH3IBAHb3J9yzCH0ucLSC8J9EYp8yFNLnfrXGZAsI6IKbdZCZCeZBPqn6Rs8GmZA54PhNQC7wvpmeLx9em42FOZBXqcCfMfnqOmTnnOExnjijQpYr5qBL1VXJxUy10jZBsmCBAQ6fhSIiPPyLvUvLZCh3WTqMPJ4ENtQHKAZDZD"
# Token generated by us
# If you change this token, verify that you changed it too in the webhook configuration.
VERIFY_TOKEN = "EchoBotChido"

app = Flask(__name__)
page = Page(PAGE_ACCESS_TOKEN)  # We make the facebook page instance

GREETING_KEYWORDS = ("hello", "hi", "greetings", "sup",
                     "what's up", "good morning", "good afternoon")

GREETING_RESPONSES = ["'sup bro", "hey", "*nods*", "hey you get my snap?"]


@app.route('/')
def hello_world():
    """The server main page."""
    return 'Inicio del servidor'


def check_for_greeting(sentence):
    """If any of the words in the user's input was a greeting, return a greeting response"""
    for word in sentence.words:
        if word.lower() in GREETING_KEYWORDS:
            return random.choice(GREETING_RESPONSES)

    return sentence


@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    """This method executes as Facebook connect to us."""
        if request.method == 'POST':  # if the message is a POST, we handle it with message_handler. Si el mensaje es POST, se maneja con el message_handler
            # Facebook sends the user messages with a POST. Facebook manda los mensajes del usuario con un POST.
        page.handle_webhook(request.get_data(as_text=True))
        return 'ok'
    # if the message is a GET, we handle it here.
    elif request.method == 'GET':
        # The first you configure the webhook, FB sends a GET to your webhook to verify that it really is you, and you're not working on someone's else page.
        if request.args.get('hub.verify_token') == VERIFY_TOKEN:
            # If the verify token in the url matches our verify token we answer with the challenge to prove our identity.
            return request.args.get('hub.challenge')
        return 'Wrong Verify token'


def respond(sentence):
    cleaned = preprocess_text(sentence)
    parsed = TextBlob(cleaned)

        pronoun, noun, adjective, verb = find_candidate_parts_of_speech(parsed)
        resp = check_for_comment_about_bot(pronoun, noun, adjective)

        if not resp:
            resp = check_for_greeting(parsed)

        if not resp:
            if not pronoun:
                resp = random.choice(NONE_RESPONSES)
            elif pronoun == 'I' and not verb:
                resp = random.choice(COMMENTS_ABOUT_SELF)
            else:
                resp = construct_response(pronoun, noun, verb)

        if not resp:
            resp = random.choice(NONE_RESPONSES)

        logger.info("Returning phrase '%s'", resp)
        filter_response(resp)

        return resp


def find_candidate_parts_of_speech(parsed):
    pronoun = None
    noun = None
    adjective = None
    verb = None

    for sent in parsed.sentences:
        pronoun = find_pronoun(sent)
        noun = find_noun(sent)
        adjective = find_adjective(sent)
        verb = find_verb(sent)

    logger.info("Pronoun=%s, noun=%s, adjective=%s, verb=%s",
                pronoun, noun, adjective, verb)
    return pronoun, noun, adjective, verb


@page.handle_message
def message_handler(event):
    """Este método se ejecuta cuando nos llega un mensaje a la página. This method executes whenever a message is sent to our page."""
    sender_id = event.sender_id
    # We see if the message is a text or an attachment (image, GIF, sticker, etc)
    if event.is_text_message:

        response = event.message_text.lower()

        greeting = check_for_greeting(response)

        if greeting == response
            page.send(sender_id, "Hey, you send me: {}".format(response))
        else
            page.send(sender_id, "".format())

    elif event.is_attachment_message:
        page.send(sender_id, "I'm sorry, you have to send me text :) ")


if __name__ == '__main__':
    app.run(host="127.0.0.1", port=5000, debug=True, threaded=True)
